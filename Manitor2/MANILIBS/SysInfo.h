/*----------------------------------------------------------------------------------------	SysInfo.h, class for system information		3.6.2000 by Manfred Lippert, mani@mani.de	last change: 24.8.2001----------------------------------------------------------------------------------------*/#ifndef __ManiLibs_SysInfo_h__#define __ManiLibs_SysInfo_h__/*××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××	MP-safe: yes	MP-callable:		- init(): main context only. (Automatically done by MainThread)		- Rest: any context××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××*/#include <MemBlock.h>#include <Thread.h>#include <Shapes.h>#if TARGET_MACOS#include <Gestalt.h>#endif	// TARGET_MACOS#if TARGET_TOS#include <TOS.h>#include <FileSystem.h>typedef struct {	uint16 version;	/*  z.B. 0x0301 fŸr Version 3.01 */	uint32 date;		/*  0xttmmjjjj, z.B. 0x18061990L fŸr 18.06.1990 */} NVDI_COOKIE;#endif	// TARGET_TOSclass SysInfo {#if TARGET_TOS && SYSINFO_AES	int16 appl_xgetinfo(int16 type, int16 *out1, int16 *out2, int16 *out3, int16 *out4, int16 *global);#endifpublic:#if TARGET_MACOS	int32 carbon_version;				// 0, if no Carbon	int32 os_version;						// e.g. 0x910 for Mac OS 9.1 or 0x1000 for Mac OS X 10.0	boolean has_HFSPlus_APIs;			// has new FileSystem APIs (e.g. Mac OS 9 and Carbon)	boolean has_carbon_events;			// has Carbon Events (Carbon Version >= 1.1)	boolean has_aqua_menu_layout;		// has Aqua menu layout	boolean mp_support;					// has multiprocessing support?#elif TARGET_TOS#if SYSINFO_MISC	int16 gemdosversion;			/* Gemdos-Version */	boolean magic;					/* MagiC vorhanden? (Mit MagiC-AES, also nicht im AUTO-Ordner!) */	int16 magic_ver;				/* MagiC-Version (Hex, z.B. 0x520) */	uint32 magic_date;			/* MagiC-Datum (0xjjjjmmtt) */	boolean magicmac;				/* MagiCMac vorhanden? */	boolean magicpc;				/* MagiCPC vorhanden? */	boolean mint;	boolean Mxalloc;				/* Mxalloc vorhanden? */	int16 Mxmask;					/* Maske fŸr Mxalloc */	FSysObj startpath;			// Startpfad#endif	// SYSINFO_MISC#if SYSINFO_VDI	boolean nvdi;					/* NVDI vorhanden? */	NVDI_COOKIE nvdi_cookie;	/* NVDI-Cookie (Version/Datum) */	boolean gdos;					/* GDOS vorhanden? */	boolean speedo;				/* Speedo-Funktionen vorhanden? */	boolean EdDI;					/* EdDI-Cookie vorhanden? */	int16 EdDI_version;			/* EdDI-Version */	int16 (*EdDI_dispatch)(int16 nr, ...);	/* EdDI-Dispatcher */#endif	// SYSINFO_VDI#if SYSINFO_AES	int16 aes_handle;			/* VDI-Handle der AES */	int16 wchar, hchar;		/* Zeichenbreite/Hšhe (Systemzeichensatz) */	int16 wobfix, hobfix;	/* OBJECT-Raster der AES (obfix) */	boolean wfbevent;			/* WF_BEVENT mšglich? */	boolean wfowner;			/* wind_get(WF_OWNER) mšglich? */	boolean wfbottom;			/* wind_set/get(WF_BOTTOM) mšglich? */	boolean wfhotclose;		/* Hotcloser? */	boolean newdeskget;		/* Ermitteln des aktiven Desktops mšglich? */	boolean ap_term;			/* AP_TERM bekannt? -> SHW_INFRECGN machen! */	boolean wficonify;		/* Iconify mšglich? */	boolean wficonipos;		/* WM_ICONIFY liefert Koordinaten? */	boolean edscroll;			/* System kann scrollbare Editfelder? */	boolean gshortcut;		/* System hat G_SHORTCUT-Objekte? */	int16 aes_font;			/* AES-Font */	int16 aes_height;			/* AES-Font-Grš§e */	int16 aes_font_small;	/* kleiner AES-Font */	int16 aes_height_small;	/* kleiner AES-Font-Grš§e */	boolean obj3d;				/* 3D-Objekte? */	int16 breiter3d;			/* Verbreiterung bei 3D-Objekten (eine Richtung) */	int16 hoeher3d;			/* dito hšher */	Rect16 desk;				/* Ausma§e des Desktops (Workbereich von Fenster 0) */	boolean multitasking;	/* Multitasking? */	boolean parallelstart;	/* shel_write(0) startet sofort? */	boolean accstart;			/* shel_write(3) (ACC) mšglich? */	boolean mint2aesid;		/* appl_find kann MiNT-ID in AES-ID wandeln? */	boolean applsearch;		/* appl_search vorhanden? */	boolean coloricons;		/* Farbicons mšglich? */	int16 doex_bits;			/* mšgliche doex-Werte bei shel_write */#endif	// SYSINFO_AES#endif	// TARGET_TOS	Err init();	void dispose();};extern SysInfo sysinfo;			// global SysInfo object (initialized by MainThread)#endif