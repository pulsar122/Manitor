#ifndef __Manitor_Processes_h__#define __Manitor_Processes_h__#include <AVLTree.h>#include <gemdos.h>class ProcessAVL : public AVL {	BASPAG *pb;public:	ProcessAVL(BASPAG *pb) {this->pb = pb;};	BASPAG *get_baspag() const {return pb;};};#pragma warn_unusedarg offclass ProcessAVLTree : public AVLTree {public:	virtual int32 compare(AVL *a, AVL *b) const {return compare((ProcessAVL *)a, (ProcessAVL *)b);};	virtual int32 compare(AVL *a, int32 val) const {return 0;};	virtual int32 compare(AVL *a, void *ptr) const {return 0;};	int32 compare(ProcessAVL *a, ProcessAVL *b) const {		return (int32)(a->get_baspag() - b->get_baspag());	};	void insert(ProcessAVL *elem) {AVLTree::insert(elem);};	ProcessAVL *insert(BASPAG *pb) {		ProcessAVL *neu = new ProcessAVL(pb);		if (neu) {			insert(neu);		}		return neu;	};	void kill(ProcessAVL *elem) {AVLTree::kill(elem);};	ProcessAVL *search(ProcessAVL *elem) const {		return (ProcessAVL *)AVLTree::search(elem);	};	ProcessAVL *search(BASPAG *pb) const {		ProcessAVL elem(pb);		return search(&elem);	};};#pragma warn_unusedarg reset#endif