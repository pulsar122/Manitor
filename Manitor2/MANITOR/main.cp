#include "Manitor.h"#include "BiosTrace.h"#include "XbiosTrace.h"#include "GemdosTrace.h"#include "VDITrace.h"#include "AESTrace.h"#include "200Hz.h"#include <bios.h>#include <xbios.h>RingLogFile *log;int16 apid;int16 global[15];BASPAG **p_run;		// Pointer to Pointer to actual running process (BASPAG)bool update_immediate;	// Daten sofort (im Trap) rausschreiben?void (*old_etv_term)(void);static void etv_term(void);static bool install_trace(){	if (install_200Hz()) {		if (TrapperInstallBiosCall(-1, BiosCallTrace) == E_OK) {			if (TrapperInstallBiosReturn(-1, BiosReturnTrace) == E_OK) {				if (TrapperInstallXbiosCall(-1, XbiosCallTrace) == E_OK) {					if (TrapperInstallXbiosReturn(-1, XbiosReturnTrace) == E_OK) {						if (TrapperInstallGemdosCall(-1, GemdosCallTrace) == E_OK) {							if (TrapperInstallGemdosReturn(-1, GemdosReturnTrace) == E_OK) {								if (TrapperInstallAESCall(-1, AESCallTrace) == E_OK) {									if (TrapperInstallAESReturn(-1, AESReturnTrace) == E_OK) {										if (TrapperInstallVDICall(-1, VDICallTrace) == E_OK) {											if (TrapperInstallVDIReturn(-1, VDIReturnTrace) == E_OK) {												old_etv_term = Setexc(0x102, etv_term);	/* etv_term setzen! */												return true;											}											TrapperRemoveVDICall(-1, VDICallTrace);										}										TrapperRemoveAESReturn(-1, AESReturnTrace);									}									TrapperRemoveAESCall(-1, AESCallTrace);								}								TrapperRemoveGemdosReturn(-1, GemdosReturnTrace);							}							TrapperRemoveGemdosCall(-1, GemdosCallTrace);						}						TrapperRemoveXbiosReturn(-1, XbiosReturnTrace);					}					TrapperRemoveXbiosCall(-1, XbiosCallTrace);				}				TrapperRemoveBiosReturn(-1, BiosReturnTrace);			}			TrapperRemoveBiosCall(-1, BiosCallTrace);		}		deinstall_200Hz(false, true);	}		return false;}static void deinstall_trace(bool is_super, bool wait){	Setexc(0x102, old_etv_term);	TrapperRemoveVDIReturn(-1, VDIReturnTrace);	TrapperRemoveVDICall(-1, VDICallTrace);	TrapperRemoveAESReturn(-1, AESReturnTrace);	TrapperRemoveAESCall(-1, AESCallTrace);	TrapperRemoveGemdosReturn(-1, GemdosReturnTrace);	TrapperRemoveGemdosCall(-1, GemdosCallTrace);	TrapperRemoveXbiosReturn(-1, XbiosReturnTrace);	TrapperRemoveXbiosCall(-1, XbiosCallTrace);	TrapperRemoveBiosReturn(-1, BiosReturnTrace);	TrapperRemoveBiosCall(-1, BiosCallTrace);	deinstall_200Hz(is_super, wait);}static void etv_term(void){	ENTER_CALLBACK();	deinstall_trace(true, false);	delete log;	EXIT_CALLBACK();}static int32 get_syshdr(){	return *(int32 *)0x4f2L;}static BASPAG **GetRun()	/* siehe Profibuch */{	SYSHDR *sys = (SYSHDR *)Supexec(get_syshdr);	sys = sys->os_base;	if (sys->os_version < 0x102) {		if ((sys->os_palmode >> 1) == 4)			return ((BASPAG **)0x873c);		return ((BASPAG **)0x602c);	}	return sys->_run;}int main(){	if (TrapperCheck(0L) != E_OK) {		Cconws("Please install Trapper!\r\n");		return -1;	}	p_run = GetRun();	log = new RingLogFile("C:\\MANITOR.LOG", 1024L*1024L);	if (!log->ready()) {		return -1;	}	if ((apid = appl_init(global)) >= 0) {		if (install_trace()) {			bool terminate = false;			int16 which;			EVENT ev;			ev.i.flags = MU_MESAG|MU_TIMER;			ev.i.lo = 300;			ev.i.hi = 0;			while (!terminate) {				which = EvntMulti(&ev, global);				log->update();				if (which & MU_MESAG) {					switch (ev.msg[0]) {					case AP_TERM:						terminate = true;						break;					}				}			}			deinstall_trace(false, true);		}		appl_exit(global);	}	delete log;	return 0;}